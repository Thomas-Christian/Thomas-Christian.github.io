---
layout: default
modal-id: 3
date: 2023-04-20
title: Animal Shelter Dashboard

images:
  - MERN1.png
  - MERN2.png
  - MERN3.png

category: Databases

icon-img: Databases.png

alt: Animal Shelter Dashboard
project-date: October - December 2024
client: CS-340

link: https://github.com/Thomas-Christian/cs499-database

description: "A MERN application with features that include: role-based access, record management, interactive data visualization, and robust security measures."

# Artifact narrative
artifact_narrative: |
  <p> 

  The artifact I selected is an Animal Shelter Dashboard, originally a basic Python/Mongo application for displaying and filtering animal data. My enhanced version evolved into a full-stack web application with an interactive dashboard, user authentication, role-based access control, and modern security features. This artifact demonstrates my full-stack development skills, with a React.js frontend that highlights responsive design, data visualization, and modular architecture, and a Node.js/Express backend that showcases RESTful API design, middleware use, and clean separation of concerns. The MongoDB integration reflects my understanding of NoSQL data modeling, indexing, and aggregation. I also implemented robust security through JWT authentication, input sanitization, and protection against vulnerabilities like XSS and NoSQL injection, all following industry best practices. The audit logging system ensures accountability by capturing key actions with contextual detail. Improvements included enhanced visualization with interactive filters, refined error handling, input validation, responsive design for all device types, and better code organization and documentation.

  This project addresses all five course outcomes. Role-based access control supports diverse user needs, enabling collaboration across user types. The dashboard's clean, intuitive interface reflects professional communication of complex data, with visual hierarchy and drill-down capabilities. Algorithmic logic powers data filtering, sorting, and aggregation while balancing performance and usability through pagination and caching. Industry-standard frameworks and tools were used throughout, adhering to best practices in modular architecture and testing. Security was central, with measures like input validation, CSRF protection, and rate limiting built into every layer, and an audit log supporting transparency and incident tracking.

  Developing this artifact deepened my understanding of the MERN stack, especially around secure authentication and role-based access across the frontend and backend. Implementing middleware for route protection and using React context for managing auth state were key technical challenges. The project significantly sharpened my security skills, particularly in mitigating common web vulnerabilities and incorporating protective measures at every stage of development.

  The iterative development process reinforced the importance of testing, feedback, and continuous improvement, offering valuable lessons in UI refinement and database optimization. Ultimately, this artifact reflects my growth as a developer and readiness to build secure, scalable, and user-friendly applications for real-world environments.

  <p/>

# Code snippets section
code_snippets: |
  <div class="code-snippets-grid">
  <div class="row">
  <div class="col-md-6">
  <h4 style="font-style: italic"> Authorization Middleware </h4>
  <pre><code class="language-java">
    const jwt = require('jsonwebtoken');
    const User = require('../models/User');
    const { createAuditLog } = require('../utils/auditLogger');

    // Protect routes
    exports.protect = async (req, res, next) => {
    let token;

    // Check header for authorization token
    if (
        req.headers.authorization &&
        req.headers.authorization.startsWith('Bearer')
    ) {
        // Set token from Bearer token in header
        token = req.headers.authorization.split(' ')[1];
    }
    // Check for token in cookies
    else if (req.cookies.token) {
        token = req.cookies.token;
    }

    // Make sure token exists
    if (!token) {
        return res.status(401).json({
        success: false,
        message: 'Not authorized to access this route'
        });
    }

    try {
        // Verify token
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        // Add user to req object
        req.user = await User.findById(decoded.id);

        // If user doesn't exist anymore
        if (!req.user) {
        return res.status(401).json({
            success: false,
            message: 'User no longer exists'
        });
        }

        next();
    } catch (err) {
        // Create audit log for invalid token
        await createAuditLog({
        action: 'AUTH_FAILURE',
        actionType: 'READ',
        user: null,
        targetModel: 'Auth',
        targetId: null,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        details: { error: 'Invalid token' }
        });

        return res.status(401).json({
        success: false,
        message: 'Not authorized to access this route'
        });
    }
    };

    // Grant access to specific roles
    exports.authorize = (...roles) => {
    return (req, res, next) => {
        if (!roles.includes(req.user.role)) {
        // Create audit log for authorization failure
        createAuditLog({
            action: 'AUTHORIZATION_FAILURE',
            actionType: 'READ',
            user: req.user.id,
            targetModel: req.originalUrl.split('/')[2] || 'Unknown',
            targetId: null,
            ip: req.ip,
            userAgent: req.headers['user-agent'],
            details: { 
            requiredRoles: roles.join(','), 
            userRole: req.user.role 
            }
        });

        return res.status(403).json({
            success: false,
            message: `User role ${req.user.role} is not authorized to access this route`
        });
        }
        next();
    };
    };
  </code></pre>
  </div>
  <div class="col-md-6">
  <h4 style="font-style: italic"> Controller Example </h4>
  <pre><code class="language-java">
    const Animal = require('../models/Animal');
    const { createAuditLog } = require('../utils/auditLogger');

    // @desc    Get all animals with advanced filtering, sorting, and pagination
    // @route   GET /api/animals
    // @access  Private
    exports.getAnimals = async (req, res) => {
    try {
        // Copy req.query
        const reqQuery = { ...req.query };

        // Fields to exclude from filtering
        const removeFields = ['select', 'sort', 'page', 'limit'];
        removeFields.forEach(param => delete reqQuery[param]);

        // Create query string
        let queryStr = JSON.stringify(reqQuery);
        
        // Create operators ($gt, $gte, etc)
        queryStr = queryStr.replace(/\b(gt|gte|lt|lte|in)\b/g, match => `$${match}`);
        
        // Finding resource
        let query = Animal.find(JSON.parse(queryStr));

        // Select Fields
        if (req.query.select) {
        const fields = req.query.select.split(',').join(' ');
        query = query.select(fields);
        }

        // Sort
        if (req.query.sort) {
        const sortBy = req.query.sort.split(',').join(' ');
        query = query.sort(sortBy);
        } else {
        query = query.sort('-datetime');
        }

        // Pagination
        const page = parseInt(req.query.page, 10) || 1;
        const limit = parseInt(req.query.limit, 10) || 25;
        const startIndex = (page - 1) * limit;
        const endIndex = page * limit;
        const total = await Animal.countDocuments(JSON.parse(queryStr));

        query = query.skip(startIndex).limit(limit);

        // Execute query
        const animals = await query;

        // Pagination result
        const pagination = {};

        if (endIndex < total) {
        pagination.next = {
            page: page + 1,
            limit
        };
        }

        if (startIndex > 0) {
        pagination.prev = {
            page: page - 1,
            limit
        };
        }

        // Create audit log for viewing animals
        await createAuditLog({
        action: 'ANIMAL_VIEW',
        actionType: 'READ',
        user: req.user ? req.user.id : null,
        targetModel: 'Animal',
        targetId: null,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        details: { 
            filters: reqQuery,
            pagination: { page, limit },
            sort: req.query.sort || '-datetime',
            select: req.query.select
        }
        });

        res.status(200).json({
        success: true,
        count: animals.length,
        pagination: {
            total,
            page,
            limit,
            pages: Math.ceil(total / limit)
        },
        data: animals
        });
    } catch (error) {
        res.status(500).json({ 
        success: false, 
        message: error.message 
        });
    }
    };

    // @desc    Get filtered animals with advanced options
    // @route   GET /api/animals/filter/:filterType
    // @access  Private
    exports.getFilteredAnimals = async (req, res) => {

    try {
        const { filterType } = req.params;

        const decodedFilter = decodeURIComponent(filterType);

        let query = {};

        const waterBreeds = ["Labrador Retriever Mix", "Chesapeake Bay Retriever", "Newfoundland"]
        const mountianWildernessBreeds = ["German Shepherd", "Alaskan Malamute", "Old English Sheepdog", "Siberian Husky", "Rottweiler"]
        const disasterTrackingBreeds = ["Doberman Pinscher", "German Shepherd", "Golden Retriever", "Bloodhound", "Rottweiler"]
    
        if (decodedFilter === 'Water Rescue') {
            query = { $or: waterBreeds.map(breed => ({ breed })) }

        } else if (decodedFilter === 'Mountain/Wilderness') {
            query = { $or: mountianWildernessBreeds.map(breed => ({ breed })) }

        } else if (decodedFilter === 'Disaster/Tracking') {
            query = { $or: disasterTrackingBreeds.map(breed => ({ breed })) }
            
        } else {
        return res.status(400).json({
            success: false,
            message: 'Invalid filter type'
        });
        }

        // Add additional filtering options from query params
        const additionalFilters = { ...req.query };
        
        // Fields to exclude from filtering
        const removeFields = ['select', 'sort', 'page', 'limit'];
        removeFields.forEach(param => delete additionalFilters[param]);
        
        // Merge queries if additional filters provided
        if (Object.keys(additionalFilters).length > 0) {
        Object.keys(additionalFilters).forEach(key => {
            if (!query[key]) {
            query[key] = additionalFilters[key];
            }
        });
        }

        // Pagination
        const page = parseInt(req.query.page, 10) || 1;
        const limit = parseInt(req.query.limit, 10) || 25;
        const startIndex = (page - 1) * limit;
        const total = await Animal.countDocuments(query);

        // Sorting
        const sortBy = req.query.sort ? req.query.sort.split(',').join(' ') : '-datetime';

        // Execute query
        const animals = await Animal.find(query)
        .sort(sortBy)
        .skip(startIndex)
        .limit(limit);

        // Create audit log for filtered animal search
        await createAuditLog({
        action: 'ANIMAL_FILTER_SEARCH',
        actionType: 'READ',
        user: req.user ? req.user.id : null,
        targetModel: 'Animal',
        targetId: null,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        details: { 
            filterType,
            additionalFilters,
            pagination: { page, limit },
            sort: sortBy,
            resultCount: animals.length
        }
        });

        res.status(200).json({
        success: true,
        count: animals.length,
        pagination: {
            total,
            page,
            limit,
            pages: Math.ceil(total / limit)
        },
        data: animals
        });
    } catch (error) {
        res.status(500).json({ 
        success: false, 
        message: error.message 
        });
    }
    };

    // @desc    Get single animal
    // @route   GET /api/animals/:id
    // @access  Private
    exports.getAnimal = async (req, res) => {
    try {
        const animal = await Animal.findById(req.params.id);

        if (!animal) {
        return res.status(404).json({ 
            success: false, 
            message: 'Animal not found' 
        });
        }

        // Create audit log for viewing single animal
        await createAuditLog({
        action: 'ANIMAL_VIEW',
        actionType: 'READ',
        user: req.user ? req.user.id : null,
        targetModel: 'Animal',
        targetId: animal._id,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        details: { 
            name: animal.name,
            animal_id: animal.animal_id,
            breed: animal.breed
        }
        });

        res.status(200).json({
        success: true,
        data: animal
        });
    } catch (error) {
        res.status(500).json({ 
        success: false, 
        message: error.message 
        });
    }
    };

    // @desc    Create a new animal
    // @route   POST /api/animals
    // @access  Private/Admin or Staff
    exports.createAnimal = async (req, res) => {
    try {
        const animal = new Animal(req.body);
        
        // Add geocoding logic here if needed for location_lat and location_long
        
        // Calculate age_upon_outcome_in_weeks if not provided
        if (!animal.age_upon_outcome_in_weeks && animal.date_of_birth && animal.datetime) {
        const ageInMs = animal.datetime - animal.date_of_birth;
        const ageInWeeks = Math.floor(ageInMs / (1000 * 60 * 60 * 24 * 7));
        animal.age_upon_outcome_in_weeks = ageInWeeks;
        }
        
        const newAnimal = await animal.save();

        // Create audit log for animal creation
        await createAuditLog({
        action: 'ANIMAL_CREATE',
        actionType: 'CREATE',
        user: req.user.id,
        targetModel: 'Animal',
        targetId: newAnimal._id,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        details: { 
            name: newAnimal.name,
            animal_id: newAnimal.animal_id,
            animal_type: newAnimal.animal_type,
            breed: newAnimal.breed
        }
        });

        res.status(201).json({
        success: true,
        data: newAnimal
        });
    } catch (error) {
        res.status(400).json({ 
        success: false, 
        message: error.message 
        });
    }
    };

    // @desc    Update an animal
    // @route   PUT /api/animals/:id
    // @access  Private/Admin or Staff
    exports.updateAnimal = async (req, res) => {
    try {
        // Get original animal for audit log
        const originalAnimal = await Animal.findById(req.params.id);
        
        if (!originalAnimal) {
        return res.status(404).json({ 
            success: false, 
            message: 'Animal not found' 
        });
        }

        // Update animal
        const animal = await Animal.findByIdAndUpdate(
        req.params.id, 
        req.body, 
        { 
            new: true, 
            runValidators: true 
        }
        );

        // Create audit log for animal update
        await createAuditLog({
        action: 'ANIMAL_UPDATE',
        actionType: 'UPDATE',
        user: req.user.id,
        targetModel: 'Animal',
        targetId: animal._id,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        details: { 
            before: {
            name: originalAnimal.name,
            outcome_type: originalAnimal.outcome_type,
            outcome_subtype: originalAnimal.outcome_subtype,
            sex_upon_outcome: originalAnimal.sex_upon_outcome
            },
            after: {
            name: animal.name,
            outcome_type: animal.outcome_type,
            outcome_subtype: animal.outcome_subtype,
            sex_upon_outcome: animal.sex_upon_outcome
            }
        }
        });

        res.status(200).json({
        success: true,
        data: animal
        });
    } catch (error) {
        res.status(400).json({ 
        success: false, 
        message: error.message 
        });
    }
    };

    // @desc    Delete an animal
    // @route   DELETE /api/animals/:id
    // @access  Private/Admin
    exports.deleteAnimal = async (req, res) => {
    try {
        const animal = await Animal.findById(req.params.id);
        
        if (!animal) {
        return res.status(404).json({ 
            success: false, 
            message: 'Animal not found' 
        });
        }

        // Create audit log before deletion
        await createAuditLog({
        action: 'ANIMAL_DELETE',
        actionType: 'DELETE',
        user: req.user.id,
        targetModel: 'Animal',
        targetId: animal._id,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        details: { 
            name: animal.name,
            animal_id: animal.animal_id,
            animal_type: animal.animal_type,
            breed: animal.breed
        }
        });

        await animal.deleteOne();

        res.status(200).json({
        success: true,
        data: {}
        });
    } catch (error) {
        res.status(500).json({ 
        success: false, 
        message: error.message 
        });
    }
    };

    // @desc    Get animals by location (geospatial query)
    // @route   GET /api/animals/radius/:zipcode/:distance
    // @access  Private
    exports.getAnimalsInRadius = async (req, res) => {
    try {
        const { zipcode, distance } = req.params;

        // Get lat/lng from zipcode using a geocoding service
        // For simplicity, let's assume we have a utility function for this
        // const loc = await geocoder.geocode(zipcode);
        // const lat = loc[0].latitude;
        // const lng = loc[0].longitude;

        // For demo purposes, using hardcoded coordinates
        const lat = 30.75;
        const lng = -97.5;

        // Calculate radius using radians
        // Earth radius is 3,963 miles / 6,378 km
        const radius = distance / 3963;

        const animals = await Animal.find({
        location: {
            $geoWithin: { $centerSphere: [[lng, lat], radius] }
        }
        });

        // Create audit log for geospatial search
        await createAuditLog({
        action: 'ANIMAL_GEOSPATIAL_SEARCH',
        actionType: 'READ',
        user: req.user ? req.user.id : null,
        targetModel: 'Animal',
        targetId: null,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
        details: { 
            zipcode,
            distance,
            resultCount: animals.length
        }
        });

        res.status(200).json({
        success: true,
        count: animals.length,
        data: animals
        });
    } catch (error) {
        res.status(500).json({ 
        success: false, 
        message: error.message 
        });
    }
    };

    // @desc    Get animal statistics
    // @route   GET /api/animals/stats
    // @access  Private
    exports.getAnimalStats = async (req, res) => {
    try {
        // Advanced aggregation pipeline
        const stats = await Animal.aggregate([
        {
            $facet: {
            // Count by animal type
            'animalTypes': [
                { $group: { _id: '$animal_type', count: { $sum: 1 } } },
                { $sort: { count: -1 } }
            ],
            // Count by outcome type
            'outcomeTypes': [
                { $group: { _id: '$outcome_type', count: { $sum: 1 } } },
                { $sort: { count: -1 } }
            ],
            // Count by breed (top 10)
            'topBreeds': [
                { $group: { _id: '$breed', count: { $sum: 1 } } },
                { $sort: { count: -1 } },
                { $limit: 10 }
            ],
            // Count by month
            'monthlyStats': [
                {
                $group: {
                    _id: { $dateToString: { format: '%Y-%m', date: '$datetime' } },
                    count: { $sum: 1 }
                }
                },
                { $sort: { _id: 1 } }
            ],
            // Age statistics
            'ageStats': [
                {
                $group: {
                    _id: null,
                    avgAge: { $avg: '$age_upon_outcome_in_weeks' },
                    minAge: { $min: '$age_upon_outcome_in_weeks' },
                    maxAge: { $max: '$age_upon_outcome_in_weeks' }
                }
                }
            ]
            }
        }
        ]);

        // Create audit log for stats access
        await createAuditLog({
        action: 'ANIMAL_STATS_VIEW',
        actionType: 'READ',
        user: req.user ? req.user.id : null,
        targetModel: 'Animal',
        targetId: null,
        ip: req.ip,
        userAgent: req.headers['user-agent']
        });

        res.status(200).json({
        success: true,
        data: stats[0]
        });
    } catch (error) {
        res.status(500).json({ 
        success: false, 
        message: error.message 
        });
    }
    };
  </code></pre>
  </div>
  </div>
  <div class="row">
  <div class="col-md-6">
  <h4 style="font-style: italic"> React Components with MaterialUI </h4>
  <pre><code class="language-java">
    import React, { useEffect } from "react";
    import {
    Stack,
    CircularProgress,
    Button,
    Typography,
    Pagination,
    Box,
    Chip,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Paper,
    Alert,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Grid,
    Snackbar
    } from "@mui/material";
    import MuiAlert from '@mui/material/Alert';
    import FilterAltIcon from '@mui/icons-material/FilterAlt';
    import { useNavigate, useLocation } from 'react-router-dom';
    import { useAuth } from '../context/AuthContext';
    import { useAnimal } from '../context/AnimalContext';

    const DataTable = () => {
    // Get animal context
    const { 
        animals, 
        loading, 
        error, 
        page, 
        setPage, 
        totalPages, 
        totalItems, 
        selectedAnimal, 
        setSelectedAnimal, 
        snackbar, 
        handleCloseSnackbar,
        fetchAnimals
    } = useAnimal();
    
    // Get auth context
    const { isAuthenticated, user, token } = useAuth();
    const navigate = useNavigate();
    const location = useLocation();
    
    // Get the current filter from the URL query params
    const params = new URLSearchParams(location.search);
    const currentFilter = params.get('filter') || '';

    const handleFilterChange = (e) => {
        const filterValue = e.target.value;
        
        // Update the URL with the selected filter
        if (filterValue) {
        navigate(`?filter=${filterValue}`);
        } else {
        navigate('/');
        }
    };

    const clearFilter = () => {
        navigate('/');
    };

    // Fetch animals based on authentication status and filter
    useEffect(() => {
        fetchAnimals(currentFilter, page);
    }, [currentFilter, page, fetchAnimals]);

    // Get outcome badge color
    const getOutcomeBadgeColor = (outcome) => {
        switch (outcome) {
        case 'Adoption':
            return 'success';
        case 'Transfer':
            return 'primary';
        case 'Return to Owner':
            return 'secondary';
        case 'Euthanasia':
            return 'error';
        case 'Died':
            return 'default';
        default:
            return 'info';
        }
    };

    // Get role badge color
    const getRoleBadgeColor = (role) => {
        switch (role) {
        case 'admin':
            return 'error';
        case 'staff':
            return 'success';
        case 'volunteer':
            return 'primary';
        default:
            return 'default';
        }
    };

    if (loading && page === 1) {
        return (
        <Box
            display="flex"
            justifyContent="center"
            alignItems="center"
            height="200px"
        >
            <CircularProgress size={40} thickness={4} color="primary" />
        </Box>
        );
    }

    if (error) {
        return (
        <Box p={2} sx={{ bgcolor: '#fff1f0', borderRadius: 1, boxShadow: 1 }}>
            <Typography variant="h6" color="error">
            {error}
            </Typography>
        </Box>
        );
    }

    return (
        <Paper 
        elevation={2} 
        sx={{ 
            p: 3, 
            borderRadius: 1,
            boxShadow: 1
        }}
        >
        <Stack spacing={3} width="100%">
            {/* Header with title and filter */}
            <Grid container alignItems="center" spacing={2}>
            <Grid item xs={12} md={4}>
                <Typography variant="h5">Animals</Typography>
            </Grid>
            
            <Grid item xs={12} md={4}>
                <FormControl fullWidth variant="outlined" size="small">
                <InputLabel id="filter-label"></InputLabel>
                <Select
                    labelId="filter-label"
                    id="filter-select"
                    value={currentFilter}
                    onChange={handleFilterChange}
                    label="Filter by Training Type"
                    startAdornment={<FilterAltIcon sx={{ mr: 1, ml: -0.5, color: 'action.active' }} />}
                >
                    <MenuItem value="">All Animals</MenuItem>
                    <MenuItem value="Water Rescue">Water Rescue</MenuItem>
                    <MenuItem value="Mountain/Wilderness">Mountain/Wilderness</MenuItem>
                    <MenuItem value="Disaster/Tracking">Disaster/Tracking</MenuItem>
                </Select>
                </FormControl>
            </Grid>
            

            </Grid>
            
            {/* Active filter indicator */}
            {currentFilter && (
            <Alert 
                severity="info" 
                sx={{ mt: 1 }}
                action={
                <Button 
                    color="inherit" 
                    size="small" 
                    onClick={clearFilter}
                >
                    Clear
                </Button>
                }
            >
                <Typography variant="body2">
                <strong>Active Filter:</strong> {currentFilter}
                </Typography>
            </Alert>
            )}

            <TableContainer>
            <Table size="small">
                <TableHead>
                <TableRow>
                    <TableCell>ID</TableCell>
                    <TableCell>Name</TableCell>
                    <TableCell>Type</TableCell>
                    <TableCell>Breed</TableCell>
                    <TableCell>Color</TableCell>
                    <TableCell>Age</TableCell>
                    <TableCell>Sex</TableCell>
                    <TableCell>Outcome</TableCell>
                </TableRow>
                </TableHead>
                <TableBody>
                {animals.length > 0 ? (
                    animals.map((animal) => (
                    <TableRow
                        key={animal.animal_id || animal._id}
                        onClick={() => setSelectedAnimal(animal)}
                        hover
                        sx={{ 
                        cursor: 'pointer',
                        transition: 'background-color 0.2s'
                        }}
                    >
                        <TableCell>{animal.animal_id}</TableCell>
                        <TableCell>{animal.name || 'Unknown'}</TableCell>
                        <TableCell>{animal.animal_type}</TableCell>
                        <TableCell>{animal.breed}</TableCell>
                        <TableCell>{animal.color}</TableCell>
                        <TableCell>{animal.age_upon_outcome}</TableCell>
                        <TableCell>{animal.sex_upon_outcome}</TableCell>
                        <TableCell>
                        <Chip 
                            label={animal.outcome_type}
                            color={getOutcomeBadgeColor(animal.outcome_type)}
                            size="small"
                        />
                        </TableCell>
                    </TableRow>
                    ))
                ) : (
                    <TableRow>
                    <TableCell colSpan={8} align="center" sx={{ py: 2 }}>
                        No animals found
                    </TableCell>
                    </TableRow>
                )}
                </TableBody>
            </Table>
            </TableContainer>

            <Box
            display="flex"
            justifyContent="space-between"
            alignItems="center"
            flexWrap="wrap"
            >
            <Typography variant="body2">
                Showing {animals.length} of {totalItems} animals
            </Typography>
            
            <Pagination
                count={totalPages}
                page={page}
                onChange={(_, newPage) => setPage(newPage)}
                color="primary"
                size="small"
                showFirstButton
                showLastButton
            />
            </Box>
        </Stack>

        {/* Snackbar for notifications */}
        <Snackbar
            open={snackbar.open}
            autoHideDuration={6000}
            onClose={handleCloseSnackbar}
            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
            <MuiAlert
            elevation={6}
            variant="filled"
            onClose={handleCloseSnackbar}
            severity={snackbar.severity}
            >
            {snackbar.message}
            </MuiAlert>
        </Snackbar>
        </Paper>
    );
    };

    export default DataTable;
    </code></pre>
    </div>
    <div class="col-md-6">
    <h4 style="font-style: italic"> Authorization Context </h4>
    <pre><code class="language-java">
    import React, { createContext, useState, useEffect, useContext } from 'react';
    import axios from 'axios';
    const AuthContext = createContext();

    var AUTH_API='http://localhost:5000/api/auth'

    export const useAuth = () => useContext(AuthContext);

    export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [token, setToken] = useState(localStorage.getItem('token'));
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Configure axios defaults when token changes
    useEffect(() => {
        if (token) {
        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        localStorage.setItem('token', token);
        } else {
        delete axios.defaults.headers.common['Authorization'];
        localStorage.removeItem('token');
        }
    }, [token]);

    // Load user data on mount if token exists
    useEffect(() => {
        const loadUser = async () => {
        if (!token) {
            setLoading(false);
            return;
        }

        try {
            const res = await axios.get(`${AUTH_API}/me`);
            setUser(res.data.data);
            setLoading(false);
        } catch (err) {
            console.error('Failed to load user:', err.response?.data || err.message);
            setToken(null); // Clear invalid token
            setUser(null);
            setLoading(false);
        }
        };

        loadUser();
    }, [token]);

    // Register user
    const register = async (userData) => {
        setLoading(true);
        setError(null);
        
        try {
        const res = await axios.post(`${AUTH_API}/register`, userData);
        setToken(res.data.token);
        return res.data;
        } catch (err) {
        setError(err.response?.data?.message || 'Registration failed');
        throw err;
        } finally {
        setLoading(false);
        }
    };

    // Login user
    const login = async (credentials) => {
        setLoading(true);
        setError(null);
        
        try {
        const res = await axios.post(`${AUTH_API}/login`, credentials);
        setToken(res.data.token);
        return res.data;
        } catch (err) {
        setError(err.response?.data?.message || 'Login failed');
        throw err;
        } finally {
        setLoading(false);
        }
    };

    // Logout user
    const logout = async () => {
        try {
        if (token) {
            await axios.get(`${AUTH_API}/logout`);
        }
        } catch (err) {
        console.error('Logout error:', err.response?.data || err.message);
        } finally {
        setToken(null);
        setUser(null);
        }
    };

    // Check if user has specific role
    const hasRole = (role) => {
        if (!user) return false;
        if (Array.isArray(role)) {
        return role.includes(user.role);
        }
        return user.role === role;
    };

    const authValues = {
        user,
        token,
        loading,
        error,
        login,
        register,
        logout,
        hasRole,
        isAuthenticated: !!token
    };

    return (
        <AuthContext.Provider value={authValues}>
        {children}
        </AuthContext.Provider>
    );
    };

    export default AuthContext;
  </code></pre>
  </div>
  </div>
  </div>
---
